$date
	Fri Jul 14 18:00:39 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 16 ! s [15:0] $end
$var wire 1 " cout $end
$var reg 16 # a [15:0] $end
$var reg 16 $ b [15:0] $end
$var reg 1 % cin $end
$scope module dut $end
$var wire 16 & a [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 1 % cin $end
$var wire 16 ( s [15:0] $end
$var wire 1 " cout $end
$var wire 3 ) c [3:1] $end
$var wire 16 * bb [15:0] $end
$scope module c0 $end
$var wire 4 + a [3:0] $end
$var wire 4 , b [3:0] $end
$var wire 1 % cin $end
$var wire 4 - s [3:0] $end
$var wire 1 . cout $end
$var wire 4 / bb [3:0] $end
$upscope $end
$scope module c1 $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 1 2 cin $end
$var wire 4 3 s [3:0] $end
$var wire 1 4 cout $end
$var wire 4 5 bb [3:0] $end
$upscope $end
$scope module c2 $end
$var wire 4 6 a [3:0] $end
$var wire 4 7 b [3:0] $end
$var wire 1 8 cin $end
$var wire 4 9 s [3:0] $end
$var wire 1 : cout $end
$var wire 4 ; bb [3:0] $end
$upscope $end
$scope module c3 $end
$var wire 4 < a [3:0] $end
$var wire 4 = b [3:0] $end
$var wire 1 > cin $end
$var wire 4 ? s [3:0] $end
$var wire 1 " cout $end
$var wire 4 @ bb [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 @
b0 ?
1>
b0 =
b1111 <
b100 ;
1:
b100 9
18
b1100 7
b1111 6
b1100 5
14
b1100 3
12
b100 1
b1111 0
b101 /
1.
b100 -
b101 ,
b1111 +
b110001000101 *
b111 )
b10011000100 (
b110001000101 '
b1111111111111111 &
0%
b110001000101 $
b1111111111111111 #
1"
b10011000100 !
$end
#5
08
b1 ?
04
b110 ;
b1 @
b111 5
02
b1101 ,
b111 1
b110 7
b1111 =
b100 )
0.
b1011 3
b10 9
b11 /
b1001010110111 !
b1001010110111 (
b111 -
b1111011001111101 *
b11 +
b100 0
b1100 6
1%
b100110000011 $
b100110000011 '
b1111110001000011 #
b1111110001000011 &
#15
